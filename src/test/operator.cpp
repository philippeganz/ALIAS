///
/// \file src/test/operator.cpp
/// \brief Test suite to validate the operator classes
/// \author Philippe Ganz <philippe.ganz@gmail.com>
/// \version 0.4.0
/// \date 2018-06-02
/// \copyright GPL-3.0
///

#include "test/operator.hpp"

namespace astroqut
{
namespace test
{
namespace oper
{

bool ConvolutionTest()
{
    std::cout << "Convolution test : ";

    int picture_data[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
    Matrix<int> picture(picture_data, 16, 4, 4);
#ifdef VERBOSE
    std::cout << std::endl << "Picture :" << picture;
#endif // VERBOSE

    int filter_data[9] = {1,1,1,1,-8,1,1,1,1};
    Convolution<int> filter(Matrix<int>(filter_data, 9, 3, 3));
#ifdef VERBOSE
    std::cout << std::endl << "Filter :" << filter.Data();
#endif // VERBOSE

    int result_data[16] = {5,6,3,-14,-12,0,0,-27,-24,0,0,-39,-71,-54,-57,-90};
    Matrix<int> result(result_data, 16, 4, 4);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result;
#endif // VERBOSE

    Matrix<int> computed_result = filter * picture;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << computed_result;
#endif // VERBOSE

    bool test_result = Compare(result, computed_result);
    std::cout << (test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

void ConvolutionTime(size_t data_length, size_t filter_length)
{
    std::cout << "Convolution time : ";

    std::default_random_engine generator;
    generator.seed(123456789);
    std::uniform_int_distribution distribution(-100,100);
    size_t test_height = data_length*data_length;
    size_t test_width = data_length;

    Matrix<int>::matrix_t * A_data = (int*) _mm_malloc(sizeof(int)*test_height*test_width, sizeof(int)); // destroyed when A is destroyed
    #pragma omp parallel for simd
    for( size_t i = 0; i < test_height*test_width; ++i )
    {
        A_data[i] = distribution(generator);
    }
    astroqut::Matrix<int> A(A_data, test_height, test_width);

    Matrix<int>::matrix_t * f_data = (int*) _mm_malloc(sizeof(int)*filter_length*filter_length, sizeof(int));; // destroyed when u is destroyed
    #pragma omp parallel for simd
    for( size_t i = 0; i < filter_length*filter_length; ++i )
    {
        f_data[i] = distribution(generator);
    }
    astroqut::Convolution f(Matrix<int>(f_data, filter_length, filter_length));

    std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
    start = std::chrono::high_resolution_clock::now();

    f * A;

    end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed_time = end-start;

    std::cout << elapsed_time.count() << std::endl;
}

bool AbelTestBuild()
{
    std::cout << "Abel transform build test : ";

    long double result_data[64] = {6.77642973843897, 0, 0, 0, 4.51740668402795, 3.93954312071844, 0, 0, 3.76396656240491, 5.55697759577992, 0, 0, 3.59166304662544, 6.00000000000000, 0, 0, 4.96951010246905, 3.14960314960472, 0, 0, 3.60674282418058, 5.95986577030054, 0, 0, 3.20525658660527, 3.83453729955667, 3.29848450049413, 0, 3.09969047071048, 3.48331477354788, 4.00000000000000, 0, 4.14535063199772, 4.68187996428785, 0, 0, 3.28100269773589, 4.15121333568522, 2.74226184016042, 0, 2.97351949571160, 3.14638674339905, 4.78330429724056, 0, 2.88931747442472,2.95470862910614, 3.29150262212918, 2.00000000000000, 3.95979797464467, 5.09116882454314, 0, 0, 3.19144173948203, 3.78363082827512, 3.39411254969543, 0, 2.90710584833647, 2.99342676137806, 3.48753628387857, 1.69705627484771, 2.82842712474619, 2.82842712474619, 2.82842712474619, 2.82842712474619};
    Matrix<long double> result(result_data, 64, 16, 4);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << std::setprecision(16) << result;
#endif // VERBOSE

    AbelTransform K(8, 64, 4);
#ifdef VERBOSE
    std::cout << "Computed result :" << std::setprecision(16) << K.Data();
#endif // VERBOSE

    bool test_result = Compare(result, K.Data());
    std::cout << (test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

bool AbelTestApply()
{
    std::cout << "Abel transform apply test : ";

    long double target_data[20] = {8.01014622769739, 4.88608973803579, 9.63088539286913, 4.88897743920167, 3.67436648544477, 0.292202775621463, 5.78525061023439, 5.46805718738968, 6.24060088173690, 9.87982003161633, 9.28854139478045, 2.37283579771522, 5.21135830804002, 6.79135540865748, 0.377388662395521, 7.30330862855453, 4.58848828179931, 2.31594386708524, 3.95515215668593, 8.85168008202475};
    Matrix<long double> target(target_data, 20, 4, 5);
#ifdef VERBOSE
    std::cout << std::endl << "Target matrix :" << target;
#endif // VERBOSE

    AbelTransform K(4, 16, 2);
#ifdef VERBOSE
    std::cout << std::endl << "Reduced Abel matrix :" << K.Data();
#endif // VERBOSE

    long double result_data[80] = {35.8224629496897, 21.8512575968243, 43.0706288439303, 21.8641717890356, 16.4322664714030, 26.9498228633470, 27.6530784051721, 42.6361988988337, 28.5732838241365, 31.8538269847377, 26.9498228633470, 27.6530784051721, 42.6361988988337, 28.5732838241365, 31.8538269847377, 35.8224629496897, 21.8512575968243, 43.0706288439303, 21.8641717890356, 16.4322664714030, 39.2415420458762, 23.9368533912736, 47.1815099675066, 23.9510001800457, 18.0006460346465, 23.4825891200965, 30.1831084984458, 42.7062587489893, 31.4792012099298, 38.3370287987247, 23.4825891200965, 30.1831084984458, 42.7062587489893, 31.4792012099298, 38.3370287987247, 39.2415420458762, 23.9368533912736, 47.1815099675066, 23.9510001800457, 18.0006460346465, 35.7787591480484, 22.4789099622964, 11.3457614945738, 19.3762092778979, 43.3641991346356, 46.9288386557214, 19.6895978506477, 21.2904256482853, 30.3957134941074, 26.1037483728656, 46.9288386557214, 19.6895978506477, 21.2904256482853, 30.3957134941074, 26.1037483728656, 35.7787591480484, 22.4789099622964, 11.3457614945738, 19.3762092778979, 43.3641991346356, 32.6613891082174, 20.5203434241289, 10.3572158377527, 17.6879781674093, 39.5859167569765, 42.6159422906668, 19.8486928065819, 18.0456519272951, 26.6011045119666, 29.8901055250242, 42.6159422906668, 19.8486928065819, 18.0456519272951, 26.6011045119666, 29.8901055250242, 32.6613891082174, 20.5203434241289, 10.3572158377527, 17.6879781674093, 39.5859167569765};
    Matrix<long double> result(result_data, 40, 16, 5);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result;
#endif // VERBOSE

    Matrix<long double> computed = K*target;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << computed;
#endif // VERBOSE

    bool test_result = Compare(result, computed);
    std::cout << (test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

bool AbelTestApply2()
{
    std::cout << "Abel transform apply test 2 : ";

    long double target_data[40] = {8.14723686393179, 9.57506835434298, 4.21761282626275, 6.78735154857773, 2.76922984960890, 9.05791937075619, 9.64888535199277, 9.15735525189067, 7.57740130578334, 0.461713906311539, 1.26986816293506, 1.57613081677548, 7.92207329559554, 7.43132468124916, 0.971317812358475, 9.13375856139019, 9.70592781760616, 9.59492426392903, 3.92227019534168, 8.23457828327293, 6.32359246225410, 9.57166948242946, 6.55740699156587, 6.55477890177557, 6.94828622975817, 0.975404049994095, 4.85375648722841, 0.357116785741896, 1.71186687811562, 3.17099480060861, 2.78498218867048, 8.00280468888800, 8.49129305868777, 7.06046088019609, 9.50222048838355, 5.46881519204984, 1.41886338627215, 9.33993247757551, 0.318328463774207, 0.344460805029088};
    Matrix<long double> target(target_data, 40, 8, 5);
#ifdef VERBOSE
    std::cout << std::endl << "Target matrix :" << target;
#endif // VERBOSE

    AbelTransform K(8, 64, 4);
#ifdef VERBOSE
    std::cout << std::endl << "Reduced Abel matrix :" << K.Data();
#endif // VERBOSE

    long double result_data[320] = {55.2091781708536, 64.8847779439556, 28.5803569811085, 45.9940108790219, 18.7654915054626, 72.4884462105692, 81.2666776949775, 55.1284682585621, 60.5127264395142, 14.3286792755826, 81.0005821395051, 89.6588768437613, 66.7621716225771, 67.6548135666053, 12.9890223905747, 83.6096458008255, 92.2837312891629, 70.0923756444054, 69.8422875761826, 12.7164239563216, 83.6096458008255, 92.2837312891629, 70.0923756444054, 69.8422875761826, 12.7164239563216, 81.0005821395051, 89.6588768437613, 66.7621716225771, 67.6548135666053, 12.9890223905747, 72.4884462105692, 81.2666776949775, 55.1284682585621, 60.5127264395142, 14.3286792755826, 55.2091781708536, 64.8847779439556, 28.5803569811085, 45.9940108790219, 18.7654915054626, 69.0166272815167, 77.9735586135505, 49.8015044918200, 57.5956191081802, 15.2159312872254, 83.3689717037975, 92.0408706089610, 69.7884529085202, 69.6405261631924, 12.7396527944815, 65.0355547574044, 72.8884047612009, 74.7635875470959, 75.3231404766597, 13.8504281598767, 61.8849694832513, 69.5943762963265, 76.6595383046322, 77.1584615550212, 14.0773214964811, 61.8849694832513, 69.5943762963265, 76.6595383046322, 77.1584615550212, 14.0773214964811, 65.0355547574044, 72.8884047612009, 74.7635875470959, 75.3231404766597, 13.8504281598767, 83.3689717037975, 92.0408706089610, 69.7884529085202, 69.6405261631924, 12.7396527944815, 69.0166272815167, 77.9735586135505, 49.8015044918200, 57.5956191081802, 15.2159312872254, 76.1812447030130, 84.8669386613024, 60.3571220745630, 63.6124353864030, 13.6411177944163, 67.8147728203495, 75.7925700432392, 73.5765335956947, 74.1033661870036, 13.6661313038681, 58.7998509227024, 66.3698906933928, 79.2474223712769, 79.5700444538845, 14.3331981258208, 72.7507578765959, 80.7747514772506, 84.5087125748410, 74.3045915236758, 29.0316659511751, 72.7507578765959, 80.7747514772506, 84.5087125748410, 74.3045915236758, 29.0316659511751, 58.7998509227024, 66.3698906933928, 79.2474223712769, 79.5700444538845, 14.3331981258208, 67.8147728203495, 75.7925700432392, 73.5765335956947, 74.1033661870036, 13.6661313038681, 76.1812447030130, 84.8669386613024, 60.3571220745630, 63.6124353864030, 13.6411177944163, 78.3768087483668, 87.0394405722681, 63.3225363009628, 65.4543702143161, 13.3162541954782, 64.5833302284987, 72.4156582659151, 74.9967256434182, 75.5542785729321, 13.8815526746937, 70.7283117552744, 78.6872879589870, 83.5845636784271, 74.9872729418104, 26.7945999145701, 78.0894306025034, 86.2840327723271, 87.3756735463357, 72.7424723258790, 35.1766951822536, 78.0894306025034, 86.2840327723271, 87.3756735463357, 72.7424723258790, 35.1766951822536, 70.7283117552744, 78.6872879589870, 83.5845636784271, 74.9872729418104, 26.7945999145701, 64.5833302284987, 72.4156582659151, 74.9967256434182, 75.5542785729321, 13.8815526746937, 78.3768087483668, 87.0394405722681, 63.3225363009628, 65.4543702143161, 13.3162541954782, 35.8342178170520, 46.3620421042322, 80.2148522084722, 37.2065147262856, 49.7414039124921, 31.3013806617808, 51.2820741735806, 63.1478631058413, 33.5403730487147, 47.8149342154655, 38.3683141252514, 61.2519093882668, 64.9439826388313, 39.1544136012676, 52.2961772920269, 43.9899441124590, 67.4497676427367, 69.9915485806738, 44.2519730827866, 56.4722694082382, 43.9899441124590, 67.4497676427367, 69.9915485806738, 44.2519730827866, 56.4722694082382, 38.3683141252514, 61.2519093882668, 64.9439826388313, 39.1544136012676, 52.2961772920269, 31.3013806617808, 51.2820741735806, 63.1478631058413, 33.5403730487147, 47.8149342154655, 35.8342178170520, 46.3620421042322, 80.2148522084722, 37.2065147262856, 49.7414039124921, 35.7091088226774, 43.3498571660153, 78.4725098411004, 34.3758134321175, 45.9161665366342, 32.1790659048260, 51.1869153418312, 66.8728203720530, 35.0483031256541, 49.2716192776199, 29.6899140149219, 52.6159307870795, 56.1975614807282, 31.3498766032033, 46.0897545530459, 39.8876841162598, 62.8649940168338, 66.3655918099873, 40.5255288027761, 53.4054596563986, 39.8876841162598, 62.8649940168338, 66.3655918099873, 40.5255288027761, 53.4054596563986, 29.6899140149219, 52.6159307870795, 56.1975614807282, 31.3498766032033, 46.0897545530459, 32.1790659048260, 51.1869153418312, 66.8728203720530, 35.0483031256541, 49.2716192776199, 35.7091088226774, 43.3498571660153, 78.4725098411004, 34.3758134321175, 45.9161665366342, 35.9489210184575, 32.2567147858960, 73.1590921655500, 23.8195863425559, 31.6400250289480, 36.3227299678494, 52.8131170686339, 84.2937012878904, 43.2275280248767, 57.8743401673157, 31.4254291369274, 51.2449148372457, 63.6750042298382, 33.7404913667625, 48.0001813564202, 30.5542201387136, 51.6893510692033, 59.9572133986394, 32.4279949102232, 46.8509260860121, 30.5542201387136, 51.6893510692033, 59.9572133986394, 32.4279949102232, 46.8509260860121, 31.4254291369274, 51.2449148372457, 63.6750042298382, 33.7404913667625, 48.0001813564202, 36.3227299678494, 52.8131170686339, 84.2937012878904, 43.2275280248767, 57.8743401673157, 35.9489210184575, 32.2567147858960, 73.1590921655500, 23.8195863425559, 31.6400250289480, 37.0590419014333, 9.61482804551683, 63.2913961960546, 2.15713046851113, 2.33421444292574, 35.6764197249797, 37.9369771034304, 75.6440885579270, 29.2530092196481, 38.9904768995853, 36.0605211459356, 49.8119607021021, 82.3411188270434, 40.4330006206381, 54.1001653162969, 36.3520345661321, 53.1129073260116, 84.4936486898114, 43.5060938612034, 58.2505100747351, 36.3520345661321, 53.1129073260116, 84.4936486898114, 43.5060938612034, 58.2505100747351, 36.0605211459356, 49.8119607021021, 82.3411188270434, 40.4330006206381, 54.1001653162969, 35.6764197249797, 37.9369771034304, 75.6440885579270, 29.2530092196481, 38.9904768995853, 37.0590419014333, 9.61482804551683, 63.2913961960546, 2.15713046851113, 2.33421444292574};
    Matrix<long double> result(result_data, 320, 64, 5);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result;
#endif // VERBOSE

    Matrix<long double> computed = K*target;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << computed;
#endif // VERBOSE

    bool test_result = Compare(result, computed);
    std::cout << (test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

bool AbelTestTransposed()
{
    std::cout << "Abel transform transpose test : ";

    long double target_data[32] = {2.76922984960890, 7.09364830858073, 0.461713906311539, 7.54686681982361, 0.971317812358475, 2.76025076998578, 8.23457828327293, 6.79702676853675, 6.94828622975817, 6.55098003973841, 3.17099480060861, 1.62611735194631, 9.50222048838355, 1.18997681558377, 0.344460805029088, 4.98364051982143, 4.38744359656398, 9.59743958516081, 3.81558457093008, 3.40385726666133, 7.65516788149002, 5.85267750979777, 7.95199901137063, 2.23811939491137, 1.86872604554379, 7.51267059305653, 4.89764395788231, 2.55095115459269, 4.45586200710900, 5.05957051665142, 6.46313010111265, 6.99076722656686};
    Matrix<long double> target(target_data, 32, 16, 2);
#ifdef VERBOSE
    std::cout << std::endl << "Target matrix :" << target;
#endif // VERBOSE

    AbelTransform K = AbelTransform(4, 16, 2).Transpose();
#ifdef VERBOSE
    std::cout << std::endl << "Reduced Abel matrix :" << K.Data();
#endif // VERBOSE

    long double result_data[8] = {125.499637650555, 160.519878649402, 38.7113293184736, 28.5793523089004, 51.1511993076565, 41.4024773853816, 160.943146432485, 174.074992467387};
    Matrix<long double> result(result_data, 8, 4, 2);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result;
#endif // VERBOSE

    Matrix<long double> computed = K*target;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << computed;
#endif // VERBOSE

    bool test_result = Compare(result, computed);
    std::cout << (test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

bool AbelTestTransposed2()
{
    std::cout << "Abel transform transpose test 2 : ";

    long double target_data[192] = {4.86791632403172, 6.79135540865748, 1.73388613119006, 4.35858588580919, 3.95515215668593, 3.90937802323736, 4.46783749429806, 3.67436648544477, 8.31379742839070, 3.06349472016557, 9.87982003161633, 8.03364391602440, 5.08508655381127, 0.377388662395521, 0.604711791698936, 5.10771564172110, 8.85168008202475, 3.99257770613576, 8.17627708322262, 9.13286827639239, 5.26875830508296, 7.94831416883453, 7.96183873585212, 4.16799467930787, 6.44318130193692, 0.987122786555743, 6.56859890973707, 3.78609382660268, 2.61871183870716, 6.27973359190104, 8.11580458282477, 3.35356839962797, 2.91984079961715, 5.32825588799455, 6.79727951377338, 4.31651170248720, 3.50727103576883, 1.36553137355370, 0.154871256360190, 9.39001561999887, 7.21227498581740, 9.84063724379154, 8.75942811492984, 1.06761861607241, 1.67168409914656, 5.50156342898422, 6.53757348668560, 1.06216344928664, 6.22475086001228, 4.94173936639270, 3.72409740055537, 5.87044704531417, 7.79051723231275, 1.98118402542975, 2.07742292733029, 7.15037078400694, 4.89687638016024, 3.01246330279491, 9.03720560556316, 3.39493413390758, 4.70923348517591, 8.90922504330789, 9.51630464777727, 2.30488160211559, 3.34163052737496, 9.20332039836564, 8.44308792695389, 6.98745832334795, 0.526769976807926, 1.94764289567049, 1.97809826685929, 7.37858095516997, 2.25921780972399, 0.305409463046367, 2.69119426398556, 1.70708047147859, 7.44074260367462, 4.22835615008808, 2.27664297816554, 5.00022435590201, 5.47870901214845, 4.35698684103899, 4.79922141146060, 9.42736984276934, 3.11102286650413, 9.04722238067363, 4.17744104316662, 9.23379642103244, 6.09866648422559, 9.83052466469856, 4.30207391329584, 6.17666389588455, 3.01454948712065, 1.84816320124136, 8.59442305646212, 7.01098755900926, 9.04880968679893, 8.05489424529686, 6.66338851584426, 9.79748378356085, 5.76721515614685, 5.39126465042857, 4.38869973126103, 1.82922469414914, 6.98105520180308, 1.11119223440599, 2.39932010568717, 6.66527913402587, 2.58064695912067, 8.86511933076101, 1.78132454400338, 4.08719846112552, 0.286741524641061, 1.28014399720173, 5.94896074008614, 4.89901388512224, 9.99080394761361, 2.62211747780845, 1.67927145682257, 1.71121066356432, 6.02843089382083, 9.78680649641159, 0.326008205305280, 7.11215780433683, 7.12694471678914, 5.61199792709660, 2.21746734017240, 5.00471624154843, 8.81866500451810, 1.17417650855806, 4.71088374541939, 6.69175304534394, 2.96675873218327, 0.596188675796392, 1.90433267179954, 3.18778301925882, 6.81971904149063, 3.68916546063895, 4.24166759713807, 0.424311375007417, 4.60725937260412, 5.07858284661118, 0.714454646006424, 9.81637950970750, 0.855157970900440, 5.21649842464284, 1.56404952226563, 2.62482234698333, 0.967300257808670, 8.55522805845911, 8.01014622769739, 8.18148553859625, 6.44764536870088, 0.292202775621463, 8.17547092079286, 3.76272210278832, 9.28854139478045, 7.22439592366842, 1.90923695236303, 7.30330862855453, 1.49865442477967, 4.28252992979386, 4.88608973803579, 6.59605252908307, 4.82022061031856, 5.78525061023439, 5.18594942510538, 1.20611613297162, 2.37283579771522, 9.72974554763863, 5.89507484695059, 4.58848828179931, 6.48991492712356, 2.26187679752676, 9.63088539286913, 8.00330575352401, 3.84619124369411, 5.46805718738968, 4.53797708726920, 5.82986382747674, 5.21135830804002, 4.32391503783462, 2.51806122472313, 2.31594386708524, 8.25313795402046, 2.90440664276979, 4.88897743920167, 0.834698148589140, 6.17090884393223, 6.24060088173690, 1.33171007607162, 2.65280909810029};
    Matrix<long double> target(target_data, 192, 64, 3);
#ifdef VERBOSE
    std::cout << std::endl << "Target matrix :" << target;
#endif // VERBOSE

    AbelTransform K = AbelTransform(8, 64, 4).Transpose();
#ifdef VERBOSE
    std::cout << std::endl << "Reduced Abel matrix :" << K.Data();
#endif // VERBOSE

    long double result_data[24] = {603.096962183410, 663.296921722130, 558.167027919524, 595.289392818560, 646.333543937225, 598.316360516629, 260.375668950356, 341.375203143122, 293.251106567908, 56.0999782092877, 93.8919608447764, 90.2833247745964, 33.1080448090146, 46.0657046385060, 55.1024943276438, 252.901494357549, 263.707432185032, 279.138137327880, 608.760675292966, 602.472874776838, 574.282696083697, 566.258940004259, 588.198433928721, 533.154610632546};
    Matrix<long double> result(result_data, 24, 8, 3);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result;
#endif // VERBOSE

    Matrix<long double> computed = K*target;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << computed;
#endif // VERBOSE

    bool test_result = Compare(result, computed);
    std::cout << (test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

void AbelTime(size_t pic_size)
{
    std::cout << "Abel time : ";

    AbelTransform K(pic_size, pic_size*pic_size, pic_size/2);

    std::default_random_engine generator;
    generator.seed(123456789);
    std::normal_distribution<double> distribution(100.0,10.0);
    size_t test_height = pic_size;
    size_t test_width = 1;

    Matrix<long double>::matrix_t * target_data = (long double*) _mm_malloc(sizeof(long double)*test_height*test_width, sizeof(long double)); // destroyed when A is destroyed
    #pragma omp parallel for simd
    for( size_t i = 0; i < test_height*test_width; ++i )
    {
        target_data[i] = distribution(generator);
    }
    astroqut::Matrix<long double> target(target_data, test_height, test_width);

    std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
    start = std::chrono::high_resolution_clock::now();

#ifdef VERBOSE
    int progress_step = std::max(1, (int) std::floor((double)(pic_size)/100.0));
    int step = 0;
    std::cout << std::endl;
#endif // VERBOSE
    for(size_t i = 0; i < pic_size; ++i)
    {
#ifdef VERBOSE
        if( i % progress_step == 0 )
            std::cout << "\r" << step++ << "/100";
#endif // VERBOSE
        K * target;
    }
#ifdef VERBOSE
    std::cout << "\r100/100" << std::endl;
#endif // VERBOSE

    end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed_time = end-start;

    std::cout << elapsed_time.count() << " seconds" << std::endl;
}

bool WaveletTest()
{
    std::cout << "Wavelet transform test : ";

    long double picture_data[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
    Matrix<long double> picture(picture_data, 16, 16, 1);
#ifdef VERBOSE
    std::cout << std::endl << "Picture :" << picture;
#endif // VERBOSE

    Wavelet daubechies_6_t = Wavelet(daubechies, 6, true);

    long double result_data[16] = {33.9999999996562, 1.92870260709001, 11.0375107155067, -8.07873392230074, 8.81797181064152, -2.38323234580054, 2.05073458214855e-12, -2.11018414439074, 7.58753530181676, -1.93068105222996, 1.00010971726405e-12, 6.99973412565669e-12, 1.30005450849069e-11, 1.89994409094396e-11, 2.49996690016019e-11, 3.10010350723644e-11};
    Matrix<long double> result(result_data, 16, 16, 1);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result;
#endif // VERBOSE

    Matrix<long double> computed_result = daubechies_6_t * picture;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << computed_result;
#endif // VERBOSE

    bool forward_test_result = Compare(result, computed_result);

    Wavelet daubechies_6 = Wavelet(daubechies, 6);

    long double result_data_inverse[16] = {0.999999999830280, 1.99999999983316, 2.99999999982896, 3.99999999983609, 4.99999999986459, 5.99999999983541, 6.99999999982718, 7.99999999982039, 8.99999999983825, 9.99999999986950, 10.9999999998462, 11.9999999998085, 12.9999999998490, 13.9999999998423, 14.9999999998291, 15.9999999998298};
    Matrix<long double> result_inverse(result_data_inverse, 16, 16, 1);
#ifdef VERBOSE
    std::cout << std::endl << "Expected result :" << result_inverse;
#endif // VERBOSE

    Matrix<long double> computed_result_inverse = daubechies_6 * computed_result;
#ifdef VERBOSE
    std::cout << std::endl << "Computed result inverse :" << computed_result_inverse;
#endif // VERBOSE

    bool inverse_test_result = Compare(result_inverse, computed_result_inverse);

    std::cout << ( (forward_test_result && inverse_test_result) ? "Success" : "Failure") << std::endl;

    return (forward_test_result && inverse_test_result);
}


bool SplineTest()
{
    std::cout << "Spline transform test : ";

    long double spline_data[64] = {0, 0.0495948631438400, 0.137748419283785, 0.312656717572375, 0, 0, 0, 0, 0, 0.0778572945855756, 0.168680338674954, 0.253462366739470, 0, 0, 0, 0, 0, 0, 0, 0, 0.499961343425702, 3.86267591053924e-05, 2.98151922255831e-08, 0, 0, 0, 0, 0,0.467894471545794, 0.0310643089055039, 0.00104121954870257, 0, 0, 0, 0, 0, 0.499999995281034, 4.71896212886988e-09, 4.00926840315234e-15, 0, 0, 0, 0, 0, 0.497490780576378, 0.00250568586070606, 3.53356291603347e-06, 0, 0, 0, 0, 0, 0.499999999999424, 5.76460752302759e-13, 5.36870846475105e-22, 0, 0, 0, 0, 0, 0.496208867698466, 0.00378644775133792,4.68455019562469e-06, 0};
    Matrix<long double> expected_result(spline_data, 64, 8, 8);
#ifdef VERBOSE
    std::cout << std::endl << "Spline matrix :" << expected_result;
#endif // VERBOSE

    Spline king = Spline(8).Transpose();
#ifdef VERBOSE
    std::cout << std::endl << "Computed result :" << king.Data();
#endif // VERBOSE

    bool test_result = Compare(expected_result, king.Data());

    std::cout << ( test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}


bool BlurTest()
{
    std::cout << "Blur filter test : ";

    long double blur_data[529] = {0.000126521415371649, 0.000143905849336145, 0.000163433155242391, 0.000185040513156193, 0.000208457842134182, 0.000233127059481043, 0.000258132046785203, 0.000282171611475018, 0.000303616351870435, 0.000320682015494306, 0.000331716260239522, 0.000335537739129987, 0.000331716260239522, 0.000320682015494306, 0.000303616351870435, 0.000282171611475018, 0.000258132046785203, 0.000233127059481043, 0.000208457842134182, 0.000185040513156193, 0.000163433155242391, 0.000143905849336145, 0.000126521415371649, 0.000143905849336145, 0.000165748576461534, 0.000190834297270279, 0.000219266531045540, 0.000250877733638467, 0.000285075955422629, 0.000320682015494306, 0.000355813142794541, 0.000387902325761265, 0.000413948336419108, 0.000431031188277258, 0.000436992029913832, 0.000431031188277258, 0.000413948336419108, 0.000387902325761265, 0.000355813142794541, 0.000320682015494306, 0.000285075955422629, 0.000250877733638467, 0.000219266531045540, 0.000190834297270279, 0.000165748576461534, 0.000143905849336145, 0.000163433155242391, 0.000190834297270279, 0.000223081701281029, 0.000260629305061727, 0.000303616351870435, 0.000351594972142603, 0.000403184934048200, 0.000455737640868358, 0.000505189563004633, 0.000546358785620721, 0.000573867423679684, 0.000583561441581045, 0.000573867423679684, 0.000546358785620721, 0.000505189563004633, 0.000455737640868358, 0.000403184934048200, 0.000351594972142603, 0.000303616351870435, 0.000260629305061727, 0.000223081701281029, 0.000190834297270279, 0.000163433155242391, 0.000185040513156193, 0.000219266531045540, 0.000260629305061727, 0.000310254190696368, 0.000368995238766598, 0.000436992029913832, 0.000512995445312548, 0.000593535491021971, 0.000672246656021609, 0.000739976767965394, 0.000786367037569965, 0.000802933974830655, 0.000786367037569965, 0.000739976767965394, 0.000672246656021609, 0.000593535491021971, 0.000512995445312548, 0.000436992029913832, 0.000368995238766598, 0.000310254190696368, 0.000260629305061727, 0.000219266531045540, 0.000185040513156193, 0.000208457842134182, 0.000250877733638467, 0.000303616351870435, 0.000368995238766598, 0.000449340432617602, 0.000546358785620721, 0.000659951812941563, 0.000786367037569965, 0.000916065276059087, 0.00103267208189643, 0.00111527812205121, 0.00114532791894394, 0.00111527812205121, 0.00103267208189643, 0.000916065276059087, 0.000786367037569965, 0.000659951812941563, 0.000546358785620721, 0.000449340432617602, 0.000368995238766598, 0.000303616351870435, 0.000250877733638467, 0.000208457842134182, 0.000233127059481043, 0.000285075955422629, 0.000351594972142603, 0.000436992029913832, 0.000546358785620721, 0.000684933666387970, 0.000856352143358899, 0.00105902606758347, 0.00128044074293051, 0.00149162623079560, 0.00164844795241535, 0.00170702196798360, 0.00164844795241535, 0.00149162623079560, 0.00128044074293051, 0.00105902606758347, 0.000856352143358899, 0.000684933666387970, 0.000546358785620721, 0.000436992029913832, 0.000351594972142603, 0.000285075955422629, 0.000233127059481043, 0.000258132046785203, 0.000320682015494306, 0.000403184934048200, 0.000512995445312548, 0.000659951812941563, 0.000856352143358899, 0.00111527812205121, 0.00144487174298816, 0.00183530874595181, 0.00223895453877645, 0.00255960218492860, 0.00268414432394022, 0.00255960218492860, 0.00223895453877645, 0.00183530874595181, 0.00144487174298816, 0.00111527812205121, 0.000856352143358899, 0.000659951812941563, 0.000512995445312548, 0.000403184934048200, 0.000320682015494306, 0.000258132046785203, 0.000282171611475018, 0.000355813142794541, 0.000455737640868358, 0.000593535491021971, 0.000786367037569965, 0.00105902606758347, 0.00144487174298816, 0.00198077960863662, 0.00268414432394022, 0.00349569279792594, 0.00420700250886905, 0.00450034133700009, 0.00420700250886905, 0.00349569279792594, 0.00268414432394022, 0.00198077960863662, 0.00144487174298816, 0.00105902606758347, 0.000786367037569965, 0.000593535491021971, 0.000455737640868358, 0.000355813142794541, 0.000282171611475018, 0.000303616351870435, 0.000387902325761265, 0.000505189563004633, 0.000672246656021609, 0.000916065276059087, 0.00128044074293051, 0.00183530874595181, 0.00268414432394022, 0.00394458617071553, 0.00562657273252606, 0.00732769156100580, 0.00809803112887704, 0.00732769156100580, 0.00562657273252606, 0.00394458617071553, 0.00268414432394022, 0.00183530874595181, 0.00128044074293051, 0.000916065276059087, 0.000672246656021609, 0.000505189563004633, 0.000387902325761265, 0.000303616351870435, 0.000320682015494306, 0.000413948336419108, 0.000546358785620721, 0.000739976767965394, 0.00103267208189643, 0.00149162623079560, 0.00223895453877645, 0.00349569279792594, 0.00562657273252606, 0.00901591719087413, 0.0131853684357362, 0.0153597622033374, 0.0131853684357362, 0.00901591719087413, 0.00562657273252606, 0.00349569279792594, 0.00223895453877645, 0.00149162623079560, 0.00103267208189643, 0.000739976767965394, 0.000546358785620721, 0.000413948336419108, 0.000320682015494306, 0.000331716260239522, 0.000431031188277258, 0.000573867423679684, 0.000786367037569965, 0.00111527812205121, 0.00164844795241535, 0.00255960218492860, 0.00420700250886905, 0.00732769156100580, 0.0131853684357362, 0.0221057456156646, 0.0276368678513882, 0.0221057456156646, 0.0131853684357362, 0.00732769156100580, 0.00420700250886905, 0.00255960218492860, 0.00164844795241535, 0.00111527812205121, 0.000786367037569965, 0.000573867423679684, 0.000431031188277258, 0.000331716260239522, 0.000335537739129987, 0.000436992029913832, 0.000583561441581045, 0.000802933974830655, 0.00114532791894394, 0.00170702196798360, 0.00268414432394022, 0.00450034133700009, 0.00809803112887704, 0.0153597622033374, 0.0276368678513882, 0.0359907839686459, 0.0276368678513882, 0.0153597622033374, 0.00809803112887704, 0.00450034133700009, 0.00268414432394022, 0.00170702196798360, 0.00114532791894394, 0.000802933974830655, 0.000583561441581045, 0.000436992029913832, 0.000335537739129987, 0.000331716260239522, 0.000431031188277258, 0.000573867423679684, 0.000786367037569965, 0.00111527812205121, 0.00164844795241535, 0.00255960218492860, 0.00420700250886905, 0.00732769156100580, 0.0131853684357362, 0.0221057456156646, 0.0276368678513882, 0.0221057456156646, 0.0131853684357362, 0.00732769156100580, 0.00420700250886905, 0.00255960218492860, 0.00164844795241535, 0.00111527812205121, 0.000786367037569965, 0.000573867423679684, 0.000431031188277258, 0.000331716260239522, 0.000320682015494306, 0.000413948336419108, 0.000546358785620721, 0.000739976767965394, 0.00103267208189643, 0.00149162623079560, 0.00223895453877645, 0.00349569279792594, 0.00562657273252606, 0.00901591719087413, 0.0131853684357362, 0.0153597622033374, 0.0131853684357362, 0.00901591719087413, 0.00562657273252606, 0.00349569279792594, 0.00223895453877645, 0.00149162623079560, 0.00103267208189643, 0.000739976767965394, 0.000546358785620721, 0.000413948336419108, 0.000320682015494306, 0.000303616351870435, 0.000387902325761265, 0.000505189563004633, 0.000672246656021609, 0.000916065276059087, 0.00128044074293051, 0.00183530874595181, 0.00268414432394022, 0.00394458617071553, 0.00562657273252606, 0.00732769156100580, 0.00809803112887704, 0.00732769156100580, 0.00562657273252606, 0.00394458617071553, 0.00268414432394022, 0.00183530874595181, 0.00128044074293051, 0.000916065276059087, 0.000672246656021609, 0.000505189563004633, 0.000387902325761265, 0.000303616351870435, 0.000282171611475018, 0.000355813142794541, 0.000455737640868358, 0.000593535491021971, 0.000786367037569965, 0.00105902606758347, 0.00144487174298816, 0.00198077960863662, 0.00268414432394022, 0.00349569279792594, 0.00420700250886905, 0.00450034133700009, 0.00420700250886905, 0.00349569279792594, 0.00268414432394022, 0.00198077960863662, 0.00144487174298816, 0.00105902606758347, 0.000786367037569965, 0.000593535491021971, 0.000455737640868358, 0.000355813142794541, 0.000282171611475018, 0.000258132046785203, 0.000320682015494306, 0.000403184934048200, 0.000512995445312548, 0.000659951812941563, 0.000856352143358899, 0.00111527812205121, 0.00144487174298816, 0.00183530874595181, 0.00223895453877645, 0.00255960218492860, 0.00268414432394022, 0.00255960218492860, 0.00223895453877645, 0.00183530874595181, 0.00144487174298816, 0.00111527812205121, 0.000856352143358899, 0.000659951812941563, 0.000512995445312548, 0.000403184934048200, 0.000320682015494306, 0.000258132046785203, 0.000233127059481043, 0.000285075955422629, 0.000351594972142603, 0.000436992029913832, 0.000546358785620721, 0.000684933666387970, 0.000856352143358899, 0.00105902606758347, 0.00128044074293051, 0.00149162623079560, 0.00164844795241535, 0.00170702196798360, 0.00164844795241535, 0.00149162623079560, 0.00128044074293051, 0.00105902606758347, 0.000856352143358899, 0.000684933666387970, 0.000546358785620721, 0.000436992029913832, 0.000351594972142603, 0.000285075955422629, 0.000233127059481043, 0.000208457842134182, 0.000250877733638467, 0.000303616351870435, 0.000368995238766598, 0.000449340432617602, 0.000546358785620721, 0.000659951812941563, 0.000786367037569965, 0.000916065276059087, 0.00103267208189643, 0.00111527812205121, 0.00114532791894394, 0.00111527812205121, 0.00103267208189643, 0.000916065276059087, 0.000786367037569965, 0.000659951812941563, 0.000546358785620721, 0.000449340432617602, 0.000368995238766598, 0.000303616351870435, 0.000250877733638467, 0.000208457842134182, 0.000185040513156193, 0.000219266531045540, 0.000260629305061727, 0.000310254190696368, 0.000368995238766598, 0.000436992029913832, 0.000512995445312548, 0.000593535491021971, 0.000672246656021609, 0.000739976767965394, 0.000786367037569965, 0.000802933974830655, 0.000786367037569965, 0.000739976767965394, 0.000672246656021609, 0.000593535491021971, 0.000512995445312548, 0.000436992029913832, 0.000368995238766598, 0.000310254190696368, 0.000260629305061727, 0.000219266531045540, 0.000185040513156193, 0.000163433155242391, 0.000190834297270279, 0.000223081701281029, 0.000260629305061727, 0.000303616351870435, 0.000351594972142603, 0.000403184934048200, 0.000455737640868358, 0.000505189563004633, 0.000546358785620721, 0.000573867423679684, 0.000583561441581045, 0.000573867423679684, 0.000546358785620721, 0.000505189563004633, 0.000455737640868358, 0.000403184934048200, 0.000351594972142603, 0.000303616351870435, 0.000260629305061727, 0.000223081701281029, 0.000190834297270279, 0.000163433155242391, 0.000143905849336145, 0.000165748576461534, 0.000190834297270279, 0.000219266531045540, 0.000250877733638467, 0.000285075955422629, 0.000320682015494306, 0.000355813142794541, 0.000387902325761265, 0.000413948336419108, 0.000431031188277258, 0.000436992029913832, 0.000431031188277258, 0.000413948336419108, 0.000387902325761265, 0.000355813142794541, 0.000320682015494306, 0.000285075955422629, 0.000250877733638467, 0.000219266531045540, 0.000190834297270279, 0.000165748576461534, 0.000143905849336145, 0.000126521415371649, 0.000143905849336145, 0.000163433155242391, 0.000185040513156193, 0.000208457842134182, 0.000233127059481043, 0.000258132046785203, 0.000282171611475018, 0.000303616351870435, 0.000320682015494306, 0.000331716260239522, 0.000335537739129987, 0.000331716260239522, 0.000320682015494306, 0.000303616351870435, 0.000282171611475018, 0.000258132046785203, 0.000233127059481043, 0.000208457842134182, 0.000185040513156193, 0.000163433155242391, 0.000143905849336145, 0.000126521415371649};
    Matrix<long double> expected_result(blur_data, 529, 23, 23);

    Blur filter(0.01, 2.2364, 1.449);

    bool test_result = Compare(expected_result, filter.Data());

    std::cout << ( test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

bool AstroTest()
{
    std::cout << "Astro operator test : ";

    Matrix<long double> x(std::string("data/test/x.data"), 4224, 1, double());

    Matrix<long double> divx(std::string("data/test/divx.data"), 4224, 1, double());

    Matrix<long double> E(std::string("data/test/E.data"), 4096, 1, double());

    Matrix<long double> expected_result(std::string("data/test/res.data"), 4096, 1, double());

    AstroOperator astro(64, 64, 32, E, divx, false, WS::Parameters());

    Matrix<long double> computed_result = astro * x;

    bool test_result = Compare(expected_result, computed_result);

    std::cout << ( test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

bool AstroTestTransposed()
{
    std::cout << "Astro transposed operator test : ";

    Matrix<long double> x(std::string("data/test/x_transposed.data"), 4096, 1, double());

    Matrix<long double> divx(std::string("data/test/divx.data"), 4224, 1, double());

    Matrix<long double> E(std::string("data/test/E.data"), 4096,1, double());

    Matrix<long double> expected_result(std::string("data/test/res_transposed.data"), 4224,1, double());

    AstroOperator astro_transp(64, 64, 32, E, divx, true, WS::Parameters());

    Matrix<long double> computed_result = astro_transp * x;

    bool test_result = Compare(expected_result, computed_result);

    std::cout << ( test_result ? "Success" : "Failure") << std::endl;

    return test_result;
}

} // namespace oper
} // namespace test
} // namespace astroqut
